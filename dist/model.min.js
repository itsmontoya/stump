export const model=e=>newDeepModel(void 0,e);export const arrayModel=e=>newArrayModel(void 0,e);const newDeepModel=(e,t)=>{if("number"==typeof t)return newModel(e,t);let r=e;return t.split(".").forEach(e=>r=newModel(r,e)),r},newModel=(e,t)=>{const r=r=>void 0===e?r[t]||{}:e.get(r,t)||{},a=(r,a)=>{if(void 0===e)return Object.assign(Object.assign({},r),{[t]:a});if(e.hasOwnProperty("put"))return e.put(r,t,a);if(e.hasOwnProperty("updateMatch"))return e.update(r,t,a);throw`invalid parent model type, <${e}> is not supported`},d={get:(e,t)=>r(e)[t],getSelf:r,find:(e,t)=>getObjectMatch(r(e),t),put:(e,t,d)=>a(e,Object.assign(Object.assign({},r(e)),{[t]:d})),remove:(e,t)=>a(e,deleteObjectValue(r(e),t)),model:e=>newDeepModel(d,e),arrayModel:e=>newArrayModel(d,e)};return d},newArrayModel=(e,t)=>{const r=r=>void 0===e?r[t]||[]:e.get(r,t)||[],a=(r,a)=>{if(void 0===e)return Object.assign(Object.assign({},r),{[t]:a});if(e.hasOwnProperty("put"))return e.put(r,t,a);if(e.hasOwnProperty("updateMatch"))return e.update(r,t,a);throw`invalid parent model type, <${e}> is not supported`},d={get:(e,t)=>r(e)[t],getSelf:r,find:(e,t)=>(r(e)||[]).find(t),findIndex:(e,t)=>(r(e)||[]).findIndex(t),append:(e,t)=>a(e,[...r(e)||[],t]),update:(e,t,d)=>a(e,updateArrayValue(r(e)||[],t,d)),remove:(e,t)=>a(e,deleteArrayValue(r(e)||[],t)),updateMatch:(e,t,d)=>a(e,updateMatchedArrayValue(r(e)||[],t,d)),updateOrAppendMatch:(e,t,d)=>a(e,updateOrAppendMatchedArrayValue(r(e)||[],t,d)),removeMatch:(e,t)=>a(e,deleteMatchedArrayValue(r(e)||[],t)),model:e=>newDeepModel(d,e),arrayModel:e=>newArrayModel(d,e)};return d},getObjectMatch=(e,t)=>{for(let r in e){const a=e[r];if(!0===t(a))return a}return null},deleteObjectValue=(e,t)=>{var r=Object.assign({},e);return delete r[t],r},updateArrayValue=(e=[],t,r)=>-1===t?[...e]:[...e.slice(0,t),r,...e.slice(t+1)],deleteArrayValue=(e,t)=>-1===t?[...e]:[...e.slice(0,t),...e.slice(t+1)],updateMatchedArrayValue=(e=[],t,r)=>updateArrayValue(e,e.findIndex(t),r),updateOrAppendMatchedArrayValue=(e=[],t,r)=>((e=[],t,r)=>-1===t?[...e,r]:[...e.slice(0,t),r,...e.slice(t+1)])(e,e.findIndex(t),r),deleteMatchedArrayValue=(e=[],t)=>deleteArrayValue(e,e.findIndex(t));